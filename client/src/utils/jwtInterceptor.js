import axios from "axios";

function jwtInterceptor() {
  axios.interceptors.request.use((req) => {
    // üê® Todo: Exercise #6
    //  ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö Token ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Header ‡∏Ç‡∏≠‡∏á Request
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Request ‡∏à‡∏≤‡∏Å Client ‡πÑ‡∏õ‡∏´‡∏≤ Server
    // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Callback Function axios.interceptors.request.use
    // Get the token from localStorage
    const token = localStorage.getItem("token");

    // If token exists, add it to the Authorization header
    if (token) {
      req.headers["Authorization"] = `Bearer ${token}`;
    }

    return req;
  });

  axios.interceptors.response.use(
    (response) => {
      return response;
    },
    (error) => {
      // üê® Todo: Exercise #6
      //  ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ Server ‡πÑ‡∏î‡πâ Response ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error
      // ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ Redirect ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÅ‡∏•‡∏∞‡∏•‡∏ö Token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Local Storage
      // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Error Callback Function ‡∏Ç‡∏≠‡∏á axios.interceptors.response.use
      if (error.response && error.response.status === 401) {
        // Unauthorized error (401) indicates invalid or expired token
        // Remove the token from localStorage
        localStorage.removeItem("token");

        // Redirect to the login page
        // Note: You might need to adjust this based on your routing setup
        window.location.href = "/login";
      }

      return Promise.reject(error);
    }
  );
}

export default jwtInterceptor;
